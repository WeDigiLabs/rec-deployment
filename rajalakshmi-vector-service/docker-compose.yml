# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  qdrant:
    image: qdrant/qdrant:latest
    restart: unless-stopped
    ports:
      - "6333:6333"        # HTTP (REST & gRPC over HTTP2)
      - "6334:6334"        # Optional internal gRPC port (can omit if unused)
    volumes:
      - qdrant_storage:/qdrant/storage

  server:
    build:
      context: .
    depends_on:
      - qdrant
    env_file:
      - .env
    environment:
      # Inside the container we must use the service name, not localhost
      QDRANT_URL: http://qdrant:6333
      # Fallback defaults if .env didn't supply them (LM Studio style local embedding server on host)
      OPENAI_API_KEY: not_required_for_lm_studio
      OPENAI_BASE_URL: https://laptop-483nic2i.tail7526d.ts.net/v1
      OPENAI_MODEL: embedding
      SKIP_OPENAI_API_KEY_CHECK: "1"
      # (Optional) Override embedding model dimension etc. if needed
      # OPENAI_EMBEDDING_DIMENSION: 768
    ports:
      - 8000:8000

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
volumes:
  qdrant_storage:
  # db-data:  # Example from template
# secrets:
#   db-password:
#     file: db/password.txt

